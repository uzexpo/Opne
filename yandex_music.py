#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–æ–π –∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –º—É–∑—ã–∫–æ–π
"""

import time
import json
import os
import subprocess
import re
from pathlib import Path
from typing import Dict, List, Optional, Any

try:
    import pyautogui
    import pygetwindow as gw
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.common.keys import Keys
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from webdriver_manager.chrome import ChromeDriverManager
    import undetected_chromedriver as uc
    WEB_AUTOMATION_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è –í–µ–±-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    WEB_AUTOMATION_AVAILABLE = False

try:
    import psutil
    PROCESS_CONTROL_AVAILABLE = True
except ImportError:
    PROCESS_CONTROL_AVAILABLE = False

class YandexMusicController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–æ–π"""
    
    def __init__(self):
        self.driver = None
        self.music_window = None
        
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
        self.selectors = {
            'play_button': '[class*="play"], [aria-label*="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏"], [title*="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏"]',
            'pause_button': '[class*="pause"], [aria-label*="–ü–∞—É–∑–∞"], [title*="–ü–∞—É–∑–∞"]',
            'next_button': '[class*="next"], [aria-label*="–°–ª–µ–¥—É—é—â–∏–π"], [title*="–°–ª–µ–¥—É—é—â–∏–π"]',
            'prev_button': '[class*="prev"], [aria-label*="–ü—Ä–µ–¥—ã–¥—É—â–∏–π"], [title*="–ü—Ä–µ–¥—ã–¥—É—â–∏–π"]',
            'search_input': 'input[placeholder*="–ù–∞–π—Ç–∏"], input[aria-label*="–ü–æ–∏—Å–∫"], .search__input',
            'volume_control': '[class*="volume"], [aria-label*="–ì—Ä–æ–º–∫–æ—Å—Ç—å"]',
            'player_controls': '.player-controls, .player, [class*="player"]'
        }
        
        # URL'—ã —Å–µ—Ä–≤–∏—Å–æ–≤
        self.music_services = {
            'yandex': 'https://music.yandex.ru',
            'youtube_music': 'https://music.youtube.com',
            'spotify_web': 'https://open.spotify.com',
            'vk_music': 'https://vk.com/audio'
        }
    
    def find_browser_with_music(self) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –±—Ä–∞—É–∑–µ—Ä —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –º—É–∑—ã–∫–æ–π"""
        music_keywords = ['—è–Ω–¥–µ–∫—Å.–º—É–∑—ã–∫–∞', 'yandex music', 'spotify', 'youtube music', 'music.yandex', 'music.youtube']
        
        try:
            windows = gw.getAllWindows()
            for window in windows:
                title = window.title.lower()
                for keyword in music_keywords:
                    if keyword in title:
                        print(f"üéµ –ù–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ —Å –º—É–∑—ã–∫–æ–π: {window.title}")
                        return window.title
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–∫–æ–Ω: {e}")
        
        return None
    
    def activate_music_window(self) -> bool:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –æ–∫–Ω–æ —Å –º—É–∑—ã–∫–æ–π"""
        try:
            music_title = self.find_browser_with_music()
            if music_title:
                windows = gw.getWindowsWithTitle(music_title)
                if windows:
                    window = windows[0]
                    window.activate()
                    time.sleep(1)
                    return True
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–∫–Ω–∞: {e}")
        
        return False
    
    def open_yandex_music(self, headless: bool = False) -> bool:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        if not WEB_AUTOMATION_AVAILABLE:
            return self._open_with_browser()
        
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
            options = Options()
            if headless:
                options.add_argument('--headless')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--window-size=1920,1080')
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å undetected-chromedriver
            try:
                self.driver = uc.Chrome(options=options)
            except:
                # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π Chrome
                service = Service(ChromeDriverManager().install())
                self.driver = webdriver.Chrome(service=service, options=options)
            
            print("üéµ –û—Ç–∫—Ä—ã–≤–∞—é –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É...")
            self.driver.get(self.music_services['yandex'])
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            print("‚úÖ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏: {e}")
            return self._open_with_browser()
    
    def _open_with_browser(self) -> bool:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º—É–∑—ã–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            import webbrowser
            webbrowser.open(self.music_services['yandex'])
            time.sleep(3)
            print("‚úÖ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {e}")
            return False
    
    def control_playback(self, action: str) -> str:
        """–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        keyboard_result = self._try_keyboard_control(action)
        if "—É—Å–ø–µ—à–Ω–æ" in keyboard_result.lower():
            return keyboard_result
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –æ–∫–Ω–∞
        window_result = self._try_window_control(action)
        if "—É—Å–ø–µ—à–Ω–æ" in window_result.lower():
            return window_result
        
        # –í –∫–æ–Ω—Ü–µ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Selenium
        if self.driver:
            return self._try_selenium_control(action)
        
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
    
    def _try_keyboard_control(self, action: str) -> str:
        """–ü—ã—Ç–∞–µ—Ç—Å—è —É–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        try:
            # –ú–µ–¥–∏–∞ –∫–ª–∞–≤–∏—à–∏
            media_keys = {
                'play': 'playpause',
                'pause': 'playpause',
                'next': 'nexttrack',
                'previous': 'prevtrack',
                'volume_up': 'volumeup',
                'volume_down': 'volumedown'
            }
            
            if action in media_keys:
                print(f"üéπ –ù–∞–∂–∏–º–∞—é –º–µ–¥–∏–∞ –∫–ª–∞–≤–∏—à—É: {media_keys[action]}")
                pyautogui.press(media_keys[action])
                time.sleep(0.5)
                return f"‚úÖ –ú–µ–¥–∏–∞ –∫–æ–º–∞–Ω–¥–∞ '{action}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {action}"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}"
    
    def _try_window_control(self, action: str) -> str:
        """–ü—ã—Ç–∞–µ—Ç—Å—è —É–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –æ–∫–Ω–∞ –∏ –∫–ª–∞–≤–∏—à–∏"""
        try:
            if not self.activate_music_window():
                return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ —Å –º—É–∑—ã–∫–æ–π"
            
            # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            browser_keys = {
                'play': 'space',
                'pause': 'space',
                'next': ['shift', 'n'],
                'previous': ['shift', 'p'],
                'volume_up': ['shift', 'up'],
                'volume_down': ['shift', 'down']
            }
            
            if action in browser_keys:
                keys = browser_keys[action]
                if isinstance(keys, list):
                    pyautogui.hotkey(*keys)
                else:
                    pyautogui.press(keys)
                
                return f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{action}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –æ–∫–Ω–µ –±—Ä–∞—É–∑–µ—Ä–∞"
            
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {action}"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º: {e}"
    
    def _try_selenium_control(self, action: str) -> str:
        """–ü—ã—Ç–∞–µ—Ç—Å—è —É–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ Selenium"""
        try:
            if not self.driver:
                return "‚ùå –î—Ä–∞–π–≤–µ—Ä –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if action in ['play', 'pause']:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/–ø–∞—É–∑—ã
                selectors_to_try = [
                    self.selectors['play_button'],
                    self.selectors['pause_button'],
                    '.player__play, .play-button, [data-testid="play-button"]'
                ]
                
                for selector in selectors_to_try:
                    try:
                        element = WebDriverWait(self.driver, 2).until(
                            EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                        )
                        element.click()
                        return f"‚úÖ –ö–Ω–æ–ø–∫–∞ '{action}' –Ω–∞–∂–∞—Ç–∞ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"
                    except:
                        continue
            
            elif action == 'next':
                try:
                    element = WebDriverWait(self.driver, 2).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, self.selectors['next_button']))
                    )
                    element.click()
                    return "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"
                except:
                    pass
            
            elif action == 'previous':
                try:
                    element = WebDriverWait(self.driver, 2).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, self.selectors['prev_button']))
                    )
                    element.click()
                    return "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫"
                except:
                    pass
            
            # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∫–ª–∞–≤–∏—à–∏
            self.driver.find_element(By.TAG_NAME, "body").send_keys(Keys.SPACE)
            return f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–±–µ–ª –¥–ª—è '{action}'"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ Selenium —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}"
    
    def search_and_play(self, query: str) -> str:
        """–ò—â–µ—Ç –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –º—É–∑—ã–∫—É"""
        try:
            if not self.driver:
                if not self.open_yandex_music():
                    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É"
            
            # –ò—â–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
            search_input = None
            search_selectors = [
                'input[placeholder*="–ù–∞–π—Ç–∏"]',
                'input[placeholder*="–ü–æ–∏—Å–∫"]',
                '.search__input',
                '[data-testid="search-input"]',
                'input[type="search"]'
            ]
            
            for selector in search_selectors:
                try:
                    search_input = WebDriverWait(self.driver, 3).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
                    break
                except:
                    continue
            
            if not search_input:
                return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞"
            
            # –í–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
            search_input.clear()
            search_input.send_keys(query)
            search_input.send_keys(Keys.RETURN)
            
            time.sleep(2)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–∂–∞—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            play_selectors = [
                '.track__play',
                '.play-button',
                '[data-testid="play-button"]',
                '.d-track__play'
            ]
            
            for selector in play_selectors:
                try:
                    play_button = WebDriverWait(self.driver, 3).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    play_button.click()
                    return f"‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ '{query}' –∑–∞–ø—É—â–µ–Ω–æ"
                except:
                    continue
            
            return f"‚úÖ –ü–æ–∏—Å–∫ '{query}' –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å play"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}"
    
    def get_current_track(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ"""
        try:
            if not self.driver:
                return "‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –æ—Ç–∫—Ä—ã—Ç"
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ
            title_selectors = [
                '.track__title',
                '.d-track__name',
                '[data-testid="track-title"]'
            ]
            
            artist_selectors = [
                '.track__artists',
                '.d-track__artists',
                '[data-testid="track-artist"]'
            ]
            
            title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            artist = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            for selector in title_selectors:
                try:
                    element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    title = element.text
                    break
                except:
                    continue
            
            for selector in artist_selectors:
                try:
                    element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    artist = element.text
                    break
                except:
                    continue
            
            return f"üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {artist} - {title}"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ: {e}"
    
    def close_browser(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        try:
            if self.driver:
                self.driver.quit()
                self.driver = None
                print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –º—É–∑—ã–∫–∏
yandex_music = YandexMusicController()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Open Interpreter
def play_yandex_music(query: str = None) -> str:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –º—É–∑—ã–∫—É –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ"""
    if query:
        return yandex_music.search_and_play(query)
    else:
        return yandex_music.control_playback('play')

def pause_yandex_music() -> str:
    """–°—Ç–∞–≤–∏—Ç –º—É–∑—ã–∫—É –Ω–∞ –ø–∞—É–∑—É"""
    return yandex_music.control_playback('pause')

def next_track_yandex() -> str:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"""
    return yandex_music.control_playback('next')

def previous_track_yandex() -> str:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫"""
    return yandex_music.control_playback('previous')

def open_yandex_music_browser() -> str:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
    if yandex_music.open_yandex_music():
        return "‚úÖ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞"
    else:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É"

def get_current_track_info() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ"""
    return yandex_music.get_current_track()

def smart_music_control(action: str, query: str = None) -> str:
    """–£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π"""
    action = action.lower()
    
    if action in ['–≤–∫–ª—é—á–∏', 'play', '–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏']:
        if query:
            return play_yandex_music(query)
        else:
            return yandex_music.control_playback('play')
    
    elif action in ['–ø–∞—É–∑–∞', 'pause', '—Å—Ç–æ–ø', 'stop']:
        return pause_yandex_music()
    
    elif action in ['—Å–ª–µ–¥—É—é—â–∏–π', 'next', '–¥–∞–ª—å—à–µ']:
        return next_track_yandex()
    
    elif action in ['–ø—Ä–µ–¥—ã–¥—É—â–∏–π', 'previous', '–Ω–∞–∑–∞–¥']:
        return previous_track_yandex()
    
    elif action in ['–æ—Ç–∫—Ä–æ–π', 'open', '–∑–∞–ø—É—Å—Ç–∏']:
        return open_yandex_music_browser()
    
    elif action in ['—á—Ç–æ –∏–≥—Ä–∞–µ—Ç', 'current', '—Ç—Ä–µ–∫']:
        return get_current_track_info()
    
    else:
        return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {action}"
