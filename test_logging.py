#!/usr/bin/env python3
"""–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ tool_call"""

import os
import sys
from urllib.parse import urlparse

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º logger –∏–∑ server
import logging
from logging.handlers import RotatingFileHandler

os.makedirs("logs", exist_ok=True)
logger = logging.getLogger("agent")
logger.setLevel(logging.INFO)
fh = RotatingFileHandler("logs/agent.log", maxBytes=2_000_000, backupCount=3, encoding="utf-8")
fmt = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
fh.setFormatter(fmt)
logger.addHandler(fh)

def run_tool(cmd: list[str], timeout: int = 120):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    import subprocess
    try:
        proc = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout)
        return {
            "ok": proc.returncode == 0,
            "rc": proc.returncode,
            "out": proc.stdout[-2000:] if proc.stdout else "",
            "err": proc.stderr[-2000:] if proc.stderr else "",
            "cmd": cmd
        }
    except subprocess.TimeoutExpired as e:
        return {"ok": False, "timeout": True, "out": e.stdout[-2000:] if e.stdout else "", "err": e.stderr[-2000:] if e.stderr else "", "cmd": cmd}
    except Exception as e:
        return {"ok": False, "error": f"{type(e).__name__}: {e}", "cmd": cmd}

def handle_tool_call(payload: dict):
    name = payload.get("tool")
    args = payload.get("args", {}) or {}
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    logger.info("TOOL %s ARGS %s", name, args)
    
    # –ü—Ä–æ—Å—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    TOOLS = {
        "audio.stop": lambda: run_tool(["cmd", "/c", "echo", "VLC stopped"]),
        "test.echo": lambda message="test": run_tool(["cmd", "/c", "echo", message])
    }
    
    if name not in TOOLS:
        result = {"ok": False, "error": f"Unknown tool: {name}"}
        logger.warning("TOOL %s UNKNOWN", name)
        return result
    
    try:
        result = TOOLS[name](**args)
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)
        result_summary = {
            "ok": result.get("ok"),
            "rc": result.get("rc"),
            "error": result.get("error"),
            "timeout": result.get("timeout")
        }
        logger.info("TOOL %s RESULT %s", name, result_summary)
        return result
    except TypeError as e:
        result = {"ok": False, "error": f"Bad args: {e}"}
        logger.error("TOOL %s BAD_ARGS %s", name, e)
        return result
    except Exception as e:
        result = {"ok": False, "error": f"{type(e).__name__}: {e}"}
        logger.error("TOOL %s EXCEPTION %s", name, e)
        return result

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è tool_call...")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä—Ç–µ
    logger.info("Testing session started")
    logger.info("Python interpreter: %s", sys.executable)
    logger.info("Working directory: %s", os.getcwd())
    
    # –¢–µ—Å—Ç 1: —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤
    result1 = handle_tool_call({"tool": "test.echo", "args": {"message": "Hello World"}})
    print(f"–¢–µ—Å—Ç 1: {result1}")
    
    # –¢–µ—Å—Ç 2: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    result2 = handle_tool_call({"tool": "unknown.tool", "args": {}})
    print(f"–¢–µ—Å—Ç 2: {result2}")
    
    # –¢–µ—Å—Ç 3: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    result3 = handle_tool_call({"tool": "test.echo", "args": {"wrong_param": "value"}})
    print(f"–¢–µ—Å—Ç 3: {result3}")
    
    logger.info("Testing session completed")
    print("‚úÖ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ logs/agent.log")
