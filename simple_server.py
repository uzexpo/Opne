#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import sys
import json
import asyncio
import websockets
from dotenv import load_dotenv
import logging
import subprocess
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleInterpreterServer:
    def __init__(self):
        self.clients = set()
        
    async def register(self, websocket):
        self.clients.add(websocket)
        logger.info(f"Client connected. Total clients: {len(self.clients)}")
        
    async def unregister(self, websocket):
        self.clients.remove(websocket)
        logger.info(f"Client disconnected. Total clients: {len(self.clients)}")
        
    async def send_to_client(self, websocket, message):
        try:
            await websocket.send(json.dumps(message))
        except websockets.exceptions.ConnectionClosed:
            pass
    
    async def execute_simple_command(self, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ Open Interpreter"""
        
        if "–ø—Ä–∏–≤–µ—Ç" in command.lower():
            return "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º!"
        
        if "–≤—Ä–µ–º—è" in command.lower():
            import datetime
            current_time = datetime.datetime.now().strftime('%H:%M:%S %d.%m.%Y')
            return f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}"
            
        if "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" in command.lower():
            try:
                subprocess.Popen(['calc.exe'])
                return "‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω!"
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}"
        
        if "–±–ª–æ–∫–Ω–æ—Ç" in command.lower():
            try:
                subprocess.Popen(['notepad.exe'])
                return "‚úÖ –ë–ª–æ–∫–Ω–æ—Ç –∑–∞–ø—É—â–µ–Ω!"
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–ª–æ–∫–Ω–æ—Ç–∞: {e}"
                
        if "–ø—Ä–æ–≤–æ–¥–Ω–∏–∫" in command.lower():
            try:
                subprocess.Popen(['explorer.exe'])
                return "‚úÖ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω!"
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞: {e}"
        
        if "–±—Ä–∞—É–∑–µ—Ä" in command.lower() or "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç" in command.lower():
            try:
                subprocess.Popen(['start', 'https://www.google.com'], shell=True)
                return "‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω!"
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}"
        
        return f"ü§ñ –ü–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É: '{command}'. –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: –ø—Ä–∏–≤–µ—Ç, –≤—Ä–µ–º—è, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –±–ª–æ–∫–Ω–æ—Ç, –ø—Ä–æ–≤–æ–¥–Ω–∏–∫, –±—Ä–∞—É–∑–µ—Ä"
    
    async def handle_message(self, websocket):
        await self.register(websocket)
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            await self.send_to_client(websocket, {
                "type": "system",
                "message": "ü§ñ Simple Interpreter –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
            })
            
            async for message in websocket:
                try:
                    data = json.loads(message)
                    user_message = data.get('message', '')
                    
                    if user_message.strip():
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
                        await self.send_to_client(websocket, {
                            "type": "user_echo",
                            "message": user_message
                        })
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        await self.send_to_client(websocket, {
                            "type": "processing",
                            "message": "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å..."
                        })
                        
                        try:
                            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É
                            response = await self.execute_simple_command(user_message)
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            await self.send_to_client(websocket, {
                                "type": "response",
                                "message": response
                            })
                            
                        except Exception as e:
                            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
                            logger.error(error_msg)
                            await self.send_to_client(websocket, {
                                "type": "error",
                                "message": error_msg
                            })
                            
                except json.JSONDecodeError:
                    await self.send_to_client(websocket, {
                        "type": "error",
                        "message": "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"
                    })
                except Exception as e:
                    logger.error(f"Error handling message: {e}")
                    
        except websockets.exceptions.ConnectionClosed:
            pass
        finally:
            await self.unregister(websocket)

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ Simple Interpreter —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üì° WebSocket —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ ws://192.168.241.1:8765")
    print("üì° –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ ws://localhost:8765")
    
    server = SimpleInterpreterServer()
    
    async def run_server():
        start_server = websockets.serve(
            server.handle_message, 
            "0.0.0.0",
            8765,
            ping_interval=20,
            ping_timeout=20
        )
        
        await start_server
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        await asyncio.Future()  # run forever
    
    asyncio.run(run_server())

if __name__ == "__main__":
    main()
