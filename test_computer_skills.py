#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Open Interpreter
"""

import asyncio
import websockets
import json
import time

async def test_music_capabilities():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    uri = "ws://localhost:8765"
    
    try:
        async with websockets.connect(uri) as websocket:
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
            
            # –¢–µ—Å—Ç 1: –í–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
            test_message = {
                "message": "–í–∫–ª—é—á–∏ –º—É–∑—ã–∫—É"
            }
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {test_message}")
            await websocket.send(json.dumps(test_message))
            
            # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç—ã
            response_count = 0
            max_responses = 10
            
            while response_count < max_responses:
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=30.0)
                    data = json.loads(response)
                    print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {data}")
                    
                    if data.get('type') == 'response':
                        print("‚úÖ –¢–µ—Å—Ç –≤–∫–ª—é—á–µ–Ω–∏—è –º—É–∑—ã–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                        break
                        
                    response_count += 1
                    
                except asyncio.TimeoutError:
                    print("‚è∞ Timeout - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç")
                    break
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            await asyncio.sleep(2)
            
            # –¢–µ—Å—Ç 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
            control_message = {
                "message": "–ü–æ—Å—Ç–∞–≤—å –º—É–∑—ã–∫—É –Ω–∞ –ø–∞—É–∑—É"
            }
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {control_message}")
            await websocket.send(json.dumps(control_message))
            
            # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
            response_count = 0
            while response_count < max_responses:
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=15.0)
                    data = json.loads(response)
                    print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {data}")
                    
                    if data.get('type') == 'response':
                        print("‚úÖ –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
                        break
                        
                    response_count += 1
                    
                except asyncio.TimeoutError:
                    print("‚è∞ Timeout - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç")
                    break
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

async def test_app_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
    uri = "ws://localhost:8765"
    
    try:
        async with websockets.connect(uri) as websocket:
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
            
            test_message = {
                "message": "–ù–∞–π–¥–∏ –∏ –æ—Ç–∫—Ä–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
            }
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {test_message}")
            await websocket.send(json.dumps(test_message))
            
            # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç—ã
            response_count = 0
            max_responses = 8
            
            while response_count < max_responses:
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=20.0)
                    data = json.loads(response)
                    print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {data}")
                    
                    if data.get('type') == 'response':
                        print("‚úÖ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
                        break
                        
                    response_count += 1
                    
                except asyncio.TimeoutError:
                    print("‚è∞ Timeout - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç")
                    break
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Open Interpreter...")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    await test_music_capabilities()
    
    print("\n" + "=" * 60)
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    await test_app_search()
    
    print("\n" + "=" * 60)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    asyncio.run(main())
