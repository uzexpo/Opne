require('dotenv').config();
const fs = require('fs');
const path = require('path');

console.log('üîß –ó–∞–≥—Ä—É–∑–∫–∞ Chat Interface...');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
let config = { wsPort: 8765, wsHost: 'localhost' };
try {
  const configPath = path.join(__dirname, 'config', 'local.json');
  if (fs.existsSync(configPath)) {
    config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', config);
  }
} catch (error) {
  console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç:', error);
}

// WebSocket URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const WS_PORT = process.env.OI_WS_PORT || config.wsPort || 8765;
const WS_HOST = process.env.OI_WS_HOST || config.wsHost || 'localhost';
const WS_URL = `ws://${WS_HOST}:${WS_PORT}`;

console.log(`üîó WebSocket URL: ${WS_URL}`);

let socket = null;
let isConnecting = false;
let reconnectAttempts = 0;
const maxReconnectAttempts = 5;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
let messagesContainer;
let messageInput;
let sendBtn;
let statusElement;

// –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
  console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω');
  
  // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
  messagesContainer = document.getElementById('messages');
  messageInput = document.getElementById('messageInput');
  sendBtn = document.getElementById('sendBtn');
  clearBtn = document.getElementById('clearBtn');
  statusElement = document.getElementById('status');
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  setupEventListeners();
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
  connectToServer();
});

function setupEventListeners() {
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ
  sendBtn.addEventListener('click', sendMessage);
  
  // –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
  clearBtn.addEventListener('click', clearMessages);
  
  // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
  document.addEventListener('keydown', (e) => {
    // Ctrl+L - –æ—á–∏—Å—Ç–∫–∞
    if (e.ctrlKey && e.key === 'l') {
      e.preventDefault();
      clearMessages();
      return;
    }
    
    // Escape - —Å–±—Ä–æ—Å –≤–≤–æ–¥–∞
    if (e.key === 'Escape') {
      messageInput.value = '';
      messageInput.focus();
      return;
    }
  });
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ Enter
  messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  });
  
  console.log('üìã –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

function connectToServer() {
  if (isConnecting || socket?.readyState === WebSocket.OPEN) {
    return;
  }
  
  isConnecting = true;
  updateStatus('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
  console.log(`üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${WS_URL}`);
  console.debug('üîß [DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
  
  try {
    socket = new WebSocket(WS_URL);
    console.debug('üîß [DEBUG] WebSocket –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:', socket);
    
    socket.onopen = () => {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      console.debug('üîß [DEBUG] socket.onopen - –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:', socket.readyState);
      isConnecting = false;
      reconnectAttempts = 0;
      updateStatus('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ');
      enableInput();
    };
    
    socket.onmessage = (event) => {
      console.debug('üîß [DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', event.data);
      try {
        const data = JSON.parse(event.data);
        console.debug('üîß [DEBUG] –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
        handleServerMessage(data);
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
      }
    };
    
    socket.onclose = (event) => {
      console.log('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ö–æ–¥:', event.code, '–ü—Ä–∏—á–∏–Ω–∞:', event.reason);
      console.debug('üîß [DEBUG] socket.onclose - –¥–µ—Ç–∞–ª–∏:', {
        code: event.code,
        reason: event.reason,
        wasClean: event.wasClean,
        reconnectAttempts: reconnectAttempts
      });
      isConnecting = false;
      disableInput();
      
      if (reconnectAttempts < maxReconnectAttempts) {
        updateStatus(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ... (${reconnectAttempts + 1}/${maxReconnectAttempts})`);
        console.debug(`üîß [DEBUG] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts + 1}/${maxReconnectAttempts}`);
        reconnectAttempts++;
        setTimeout(() => connectToServer(), 2000);
      } else {
        updateStatus('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
        console.error('‚ùå [ERROR] –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        addMessage('error', `–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ server.py –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${WS_URL}`);
      }
    };
    
    socket.onerror = (error) => {
      console.error('‚ùå [ERROR] –û—à–∏–±–∫–∞ WebSocket:', error);
      console.debug('üîß [DEBUG] socket.onerror - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', socket.readyState);
      isConnecting = false;
      updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
    isConnecting = false;
    updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
  }
}

function handleServerMessage(data) {
  const { type, message, content } = data;
  console.debug('üîß [DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞:', type);
  
  switch (type) {
    case 'system':
      hideTyping();
      addMessage('system', message);
      break;
    case 'user_echo':
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ
      console.debug('üîß [DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —ç—Ö–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
      break;
    case 'processing':
      addMessage('system', message);
      showTyping();
      break;
    case 'response':
      hideTyping();
      addMessage('assistant', message);
      break;
    case 'stream_start':
      hideTyping();
      console.debug('üîß [DEBUG] –ù–∞—á–∞–ª–æ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞');
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      addMessage('assistant', '');
      break;
    case 'stream_chunk':
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
      updateLastMessage(content || message);
      break;
    case 'stream_end':
      hideTyping();
      console.debug('üîß [DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞');
      break;
    case 'error':
      hideTyping();
      addMessage('error', message);
      break;
    case 'stream':
      // –î–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      hideTyping();
      updateLastMessage('assistant', message);
      break;
    default:
      console.warn('‚ö†Ô∏è [WARN] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', type, data);
      addMessage('system', `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${JSON.stringify(data)}`);
  }
}

function sendMessage() {
  const message = messageInput.value.trim();
  console.debug('üîß [DEBUG] sendMessage –≤—ã–∑–≤–∞–Ω–∞ —Å:', message);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  if (!message) {
    console.debug('üîß [DEBUG] –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  if (isCriticalCommand(message)) {
    const confirmed = confirm(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:\n"${message}"\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—ë?`);
    if (!confirmed) {
      console.debug('üîß [DEBUG] –ö—Ä–∏—Ç–∏—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      addMessage('system', '‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ');
      return;
    }
  }
  
  if (!socket) {
    console.error('‚ùå [ERROR] WebSocket –Ω–µ —Å–æ–∑–¥–∞–Ω');
    addMessage('error', 'WebSocket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return;
  }
  
  if (socket.readyState !== WebSocket.OPEN) {
    console.error('‚ùå [ERROR] WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', socket.readyState);
    addMessage('error', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
  addMessage('user', message);
  console.debug('üîß [DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ UI');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
  showTyping();
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const messageData = { message };
  console.debug('üîß [DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', messageData);
  
  try {
    socket.send(JSON.stringify(messageData));
    console.debug('‚úÖ [DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå [ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    addMessage('error', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
  
  // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
  messageInput.value = '';
}

function addMessage(type, content) {
  const messageDiv = document.createElement('div');
  messageDiv.className = `message ${type}`;
  
  const contentDiv = document.createElement('div');
  contentDiv.className = 'content';
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  if (type === 'assistant' || type === 'system') {
    contentDiv.innerHTML = formatMessage(content);
  } else {
    contentDiv.textContent = content;
  }
  
  messageDiv.appendChild(contentDiv);
  messagesContainer.appendChild(messageDiv);
  scrollToBottom();
}

function showTyping() {
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
  hideTyping();
  
  const typingDiv = document.createElement('div');
  typingDiv.className = 'message assistant typing';
  typingDiv.id = 'typing-indicator';
  typingDiv.innerHTML = `
    <span>–ü–µ—á–∞—Ç–∞–µ—Ç</span>
    <div class="typing-dots">
      <span></span>
      <span></span>
      <span></span>
    </div>
  `;
  
  messagesContainer.appendChild(typingDiv);
  scrollToBottom();
}

function hideTyping() {
  const typingIndicator = document.getElementById('typing-indicator');
  if (typingIndicator) {
    typingIndicator.remove();
  }
}

function updateLastMessage(content) {
  const messageElements = messagesContainer.querySelectorAll('.message.assistant .content');
  if (messageElements.length > 0) {
    const lastElement = messageElements[messageElements.length - 1];
    lastElement.innerHTML = formatMessage(content);
    console.debug('–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', content.substring(0, 100) + '...');
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    addMessage(content, 'assistant');
    console.debug('–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
  }
  scrollToBottom();
}

function formatMessage(content) {
  if (!content) return '';
  
  // –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è markdown
  let formatted = content
    .replace(/\n/g, '<br>')
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    .replace(/`([^`]+)`/g, '<code>$1</code>');
    
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
  formatted = formatted.replace(/```(\w+)?\n?([\s\S]*?)```/g, (match, lang, code) => {
    return `<pre><code class="language-${lang || 'text'}">${code.trim()}</code></pre>`;
  });
  
  return formatted;
}

function scrollToBottom() {
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function updateStatus(status) {
  statusElement.textContent = status;
}

function enableInput() {
  messageInput.disabled = false;
  sendBtn.disabled = false;
  clearBtn.disabled = false;
  messageInput.focus();
}

function disableInput() {
  messageInput.disabled = true;
  sendBtn.disabled = true;
  clearBtn.disabled = true;
}

function clearMessages() {
  console.debug('üîß [DEBUG] –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞');
  messagesContainer.innerHTML = '';
  addMessage('system', 'üßπ –ß–∞—Ç –æ—á–∏—â–µ–Ω');
  messageInput.focus();
}

function showTyping() {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
  if (!document.getElementById('typing-indicator')) {
    const typingDiv = document.createElement('div');
    typingDiv.id = 'typing-indicator';
    typingDiv.className = 'message assistant';
    typingDiv.innerHTML = 'ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç<span class="dots">...</span>';
    messagesContainer.appendChild(typingDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }
}

function hideTyping() {
  const typingIndicator = document.getElementById('typing-indicator');
  if (typingIndicator) {
    typingIndicator.remove();
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
function isCriticalCommand(message) {
  const criticalPatterns = [
    /rm\s+-rf\s+/i,
    /del\s+\/[sf]/i,
    /format\s+[c-z]:/i,
    /sudo\s+rm/i,
    /shutdown/i,
    /reboot/i
  ];
  
  return criticalPatterns.some(pattern => pattern.test(message));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
console.log('üöÄ Chat Interface –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É');
