#!/usr/bin/env python3
"""–¢–µ—Å—Ç tool_call –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ stdout/stderr"""

import asyncio
import websockets
import json

async def test_tool_call():
    uri = "ws://localhost:8765"
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {uri}")
    
    try:
        async with websockets.connect(uri) as websocket:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É")
            
            # –¢–µ—Å—Ç 1: audio.play
            test_payload = {
                "tool": "audio.play",
                "args": {
                    "source": "https://samplelib.com/lib/preview/mp3/sample-3s.mp3",
                    "volume": 70
                }
            }
            
            print("üß™ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º tool_call:", json.dumps(test_payload, indent=2))
            await websocket.send(json.dumps(test_payload))
            
            response = await websocket.recv()
            result = json.loads(response)
            
            print("üì© –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:")
            print(json.dumps(result, indent=2, ensure_ascii=False))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            expected_fields = ["ok", "rc", "out", "err", "cmd"]
            if all(field in result for field in expected_fields):
                print("‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
            else:
                print("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–ª–µ–π:", [f for f in expected_fields if f not in result])
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_tool_call())
