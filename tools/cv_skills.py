#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ CV Navigation Skills –¥–ª—è Open Interpreter
–ù–∞–≤—ã–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from enhanced_cv import enhanced_cv, smart_click, analyze_screen
import time
import logging

logger = logging.getLogger(__name__)

class CVNavigationSkills:
    """–ù–∞–≤—ã–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è"""
    
    def __init__(self):
        self.cv = enhanced_cv
        logger.info("üéØ CV Navigation Skills –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    def find_and_open_program(self, program_name: str) -> str:
        """–ù–∞–π—Ç–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"""
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
            screen_analysis = self.cv.smart_screenshot_analysis()
            
            if not screen_analysis['success']:
                return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω: {screen_analysis['error']}"
            
            # 2. –ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–ª–∏ —è—Ä–ª—ã–∫–∞
            result = self.cv.find_and_click(f"–∏–∫–æ–Ω–∫–∞ {program_name}", click=True)
            
            if result['success']:
                return f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ '{program_name}' –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            else:
                # 3. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é –ü—É—Å–∫
                return self._open_via_start_menu(program_name)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    def _open_via_start_menu(self, program_name: str) -> str:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –ü—É—Å–∫"""
        try:
            import pyautogui
            
            # –ù–∞–∂–∞—Ç—å Win
            pyautogui.press('win')
            time.sleep(0.5)
            
            # –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            pyautogui.typewrite(program_name)
            time.sleep(0.3)
            
            # Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            pyautogui.press('enter')
            
            return f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ '{program_name}' —á–µ—Ä–µ–∑ –º–µ–Ω—é –ü—É—Å–∫"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é –ü—É—Å–∫: {e}"
    
    def click_on_text(self, text_content: str) -> str:
        """–ö–ª–∏–∫–Ω—É—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        try:
            result = self.cv.find_and_click(f"—Ç–µ–∫—Å—Ç {text_content}", click=True)
            
            if result['success']:
                return f"‚úÖ –ö–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É '{text_content}' –≤—ã–ø–æ–ª–Ω–µ–Ω"
            else:
                return f"‚ùå –¢–µ–∫—Å—Ç '{text_content}' –Ω–µ –Ω–∞–π–¥–µ–Ω: {result['error']}"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: {e}"
    
    def click_on_button(self, button_description: str) -> str:
        """–ö–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ"""
        try:
            result = self.cv.find_and_click(f"–∫–Ω–æ–ø–∫–∞ {button_description}", click=True)
            
            if result['success']:
                return f"‚úÖ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ '{button_description}' –≤—ã–ø–æ–ª–Ω–µ–Ω"
            else:
                return f"‚ùå –ö–Ω–æ–ø–∫–∞ '{button_description}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {result['error']}"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ: {e}"
    
    def navigate_to_element(self, element_description: str, action: str = "click") -> str:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç—É"""
        try:
            # –ê–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–∞
            screen_info = analyze_screen()
            
            # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
            if action == "click":
                result = smart_click(element_description)
            else:
                # –î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã
                result = f"üîÑ –î–µ–π—Å—Ç–≤–∏–µ '{action}' –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
            
            return f"üìç –ù–∞–≤–∏–≥–∞—Ü–∏—è: {result}"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}"
    
    def take_smart_screenshot(self, filename: str = None) -> str:
        """–£–º–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            if not filename:
                timestamp = int(time.time())
                filename = f"smart_screenshot_{timestamp}.png"
            
            # –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            save_path = os.path.join(os.getcwd(), filename)
            
            result = self.cv.smart_screenshot_analysis(save_path)
            
            if result['success']:
                return f"üì∏ –£–º–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}\nüîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {result['elements_count']}"
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {result['error']}"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞–≤—ã–∫–æ–≤
cv_skills = CVNavigationSkills()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Open Interpreter –Ω–∞–≤—ã–∫–∞–º–∏
def open_program(program_name: str) -> str:
    """
    –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    
    Args:
        program_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–±—Ä–∞—É–∑–µ—Ä", "–±–ª–æ–∫–Ω–æ—Ç", "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    return cv_skills.find_and_open_program(program_name)

def click_text(text: str) -> str:
    """
    –ö–ª–∏–∫–Ω—É—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∫–ª–∏–∫–∞
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    return cv_skills.click_on_text(text)

def click_button(button_name: str) -> str:
    """
    –ö–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ
    
    Args:
        button_name: –û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–û–ö", "–û—Ç–º–µ–Ω–∞", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    return cv_skills.click_on_button(button_name)

def navigate_to(element: str, action: str = "click") -> str:
    """
    –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    Args:
        element: –û–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        action: –î–µ–π—Å—Ç–≤–∏–µ ("click", "hover", etc.)
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    return cv_skills.navigate_to_element(element, action)

def smart_screenshot(filename: str = None) -> str:
    """
    –°–æ–∑–¥–∞—Ç—å —É–º–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    Args:
        filename: –ò–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    return cv_skills.take_smart_screenshot(filename)

def screen_analysis() -> str:
    """
    –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
    
    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    """
    return analyze_screen()

# –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —Å CV –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
def play_music_smart(song_request: str = None) -> str:
    """
    –£–º–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º –∑—Ä–µ–Ω–∏–µ–º
    """
    try:
        # 1. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–¥–∏–∞–ø–ª–µ–µ—Ä
        media_player_result = cv_skills.find_and_open_program("–º–µ–¥–∏–∞–ø–ª–µ–µ—Ä")
        
        if "—É—Å–ø–µ—à–Ω–æ" not in media_player_result.lower():
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            for player in ["VLC", "Windows Media Player", "–º—É–∑—ã–∫–∞", "–ø–ª–µ–µ—Ä"]:
                result = cv_skills.find_and_open_program(player)
                if "—É—Å–ø–µ—à–Ω–æ" in result.lower():
                    break
        
        time.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–µ—Ä–∞
        
        # 2. –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–µ—Å–Ω—é
        if song_request:
            # –ü–æ–∏—Å–∫ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
            search_result = cv_skills.click_on_text("–ø–æ–∏—Å–∫")
            if "–≤—ã–ø–æ–ª–Ω–µ–Ω" not in search_result:
                # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Ctrl+F
                import pyautogui
                pyautogui.hotkey('ctrl', 'f')
                time.sleep(0.5)
            
            # –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
            import pyautogui
            pyautogui.typewrite(song_request)
            pyautogui.press('enter')
        
        # 3. –ù–∞–π—Ç–∏ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        play_result = cv_skills.click_on_button("–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
        if "–≤—ã–ø–æ–ª–Ω–µ–Ω" not in play_result:
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª
            import pyautogui
            pyautogui.press('space')
        
        return f"üéµ –ú—É–∑—ã–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! {song_request if song_request else '–ü–ª–µ–π–ª–∏—Å—Ç'}"
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"

if __name__ == "__main__":
    # –¢–µ—Å—Ç –Ω–∞–≤—ã–∫–æ–≤
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CV Navigation Skills...")
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞
    result = screen_analysis()
    print(f"–ê–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–∞: {result}")
    
    # –¢–µ—Å—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    screenshot_result = smart_screenshot("test_cv_skills.png")
    print(f"–°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_result}")
