#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã Open Interpreter —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º
"""

import os
import sys
import time
import subprocess
import psutil
import json
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GUI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    import pyautogui
    import cv2
    import numpy as np
    from PIL import Image
    GUI_AVAILABLE = True
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ pyautogui
    pyautogui.FAILSAFE = True
    pyautogui.PAUSE = 0.3
except ImportError as e:
    print(f"‚ö†Ô∏è GUI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    GUI_AVAILABLE = False

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Windows
try:
    import winreg
    WINDOWS_FEATURES = True
except ImportError:
    WINDOWS_FEATURES = False

class TerminalController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    def __init__(self):
        pass
    
    def run(self, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True, encoding='utf-8')
            return result.stdout if result.returncode == 0 else result.stderr
        except Exception as e:
            return f"Error: {str(e)}"

class ClipboardController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
    def __init__(self):
        pass
    
    def copy(self, text):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        pyautogui.copy(text)
    
    def paste(self):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        return pyautogui.paste()

class DisplayController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–∏—Å–ø–ª–µ—è"""
    def __init__(self):
        pass
    
    def screenshot(self):
        """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç"""
        return pyautogui.screenshot()

class MouseController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –º—ã—à–∏"""
    def __init__(self):
        pass
    
    def click(self, x, y):
        """–ö–ª–∏–∫–∞–µ—Ç –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        pyautogui.click(x, y)
    
    def move(self, x, y):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –º—ã—à—å"""
        pyautogui.moveTo(x, y)

class KeyboardController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    def __init__(self):
        pass
    
    def type(self, text):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
        pyautogui.typewrite(text)
    
    def press(self, key):
        """–ù–∞–∂–∏–º–∞–µ—Ç –∫–ª–∞–≤–∏—à—É"""
        pyautogui.press(key)

class ComputerController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º"""
    
    def __init__(self):
        self.screen_size = pyautogui.size()
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Open Interpreter
        self.terminal = TerminalController()
        self.clipboard = ClipboardController()
        self.display = DisplayController()
        self.mouse = MouseController()
        self.keyboard = KeyboardController()
        
    def find_and_launch_music_app(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        music_apps = [
            ("Spotify", ["spotify.exe", "Spotify.exe"]),
            ("VLC", ["vlc.exe"]),
            ("Windows Media Player", ["wmplayer.exe"]),
            ("iTunes", ["iTunes.exe"]),
            ("AIMP", ["AIMP.exe"]),
            ("foobar2000", ["foobar2000.exe"]),
        ]
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for proc in psutil.process_iter(['pid', 'name']):
            try:
                proc_name = proc.info['name'].lower()
                if any(app.lower() in proc_name for _, apps in music_apps for app in apps):
                    print(f"üéµ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {proc.info['name']}")
                    return True
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        for app_name, executables in music_apps:
            for exe in executables:
                try:
                    # –ò—â–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç—è—Ö
                    paths_to_check = [
                        f"C:\\Program Files\\{app_name}\\{exe}",
                        f"C:\\Program Files (x86)\\{app_name}\\{exe}",
                        f"C:\\Users\\{os.getenv('USERNAME')}\\AppData\\Local\\{app_name}\\{exe}",
                        f"C:\\Users\\{os.getenv('USERNAME')}\\AppData\\Roaming\\{app_name}\\{exe}",
                    ]
                    
                    for path in paths_to_check:
                        if os.path.exists(path):
                            print(f"üéµ –ó–∞–ø—É—Å–∫–∞—é {app_name}: {path}")
                            subprocess.Popen([path])
                            time.sleep(3)
                            return True
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ PATH
                    try:
                        subprocess.Popen([exe])
                        print(f"üéµ –ó–∞–ø—É—â–µ–Ω {app_name} —á–µ—Ä–µ–∑ PATH")
                        time.sleep(3)
                        return True
                    except FileNotFoundError:
                        continue
                        
                except Exception as e:
                    continue
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å YouTube Music –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        try:
            import webbrowser
            webbrowser.open("https://music.youtube.com")
            print("üéµ –û—Ç–∫—Ä—ã—Ç YouTube Music –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            return True
        except:
            pass
            
        return False
    
    def control_media(self, action):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ (play/pause/stop/next/previous)"""
        media_keys = {
            'play': 'playpause',
            'pause': 'playpause', 
            'stop': 'stop',
            'next': 'nexttrack',
            'previous': 'prevtrack',
            'volume_up': 'volumeup',
            'volume_down': 'volumedown',
            'mute': 'volumemute'
        }
        
        if action.lower() in media_keys:
            pyautogui.press(media_keys[action.lower()])
            print(f"üéµ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            return True
        return False
    
    def find_application(self, app_name):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏"""
        print(f"üîç –ò—â—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for proc in psutil.process_iter(['pid', 'name', 'exe']):
            try:
                if app_name.lower() in proc.info['name'].lower():
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: {proc.info['name']}")
                    return proc.info
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        # –ò—â–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä–µ Windows
        try:
            registry_paths = [
                r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall",
                r"SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
            ]
            
            for reg_path in registry_paths:
                try:
                    with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, reg_path) as key:
                        for i in range(winreg.QueryInfoKey(key)[0]):
                            try:
                                subkey_name = winreg.EnumKey(key, i)
                                with winreg.OpenKey(key, subkey_name) as subkey:
                                    try:
                                        display_name = winreg.QueryValueEx(subkey, "DisplayName")[0]
                                        if app_name.lower() in display_name.lower():
                                            try:
                                                install_location = winreg.QueryValueEx(subkey, "InstallLocation")[0]
                                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {display_name} -> {install_location}")
                                                return {"name": display_name, "path": install_location}
                                            except FileNotFoundError:
                                                pass
                                    except FileNotFoundError:
                                        pass
                            except OSError:
                                continue
                except OSError:
                    continue
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {e}")
        
        print(f"‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{app_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None
    
    def search_files(self, pattern, directory=None):
        """–ò—â–µ—Ç —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É"""
        if directory is None:
            directory = Path.home()
        else:
            directory = Path(directory)
        
        results = []
        try:
            for file in directory.rglob(pattern):
                if file.is_file():
                    results.append(str(file))
                    if len(results) >= 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        break
        except PermissionError:
            pass
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        
        return results
    
    def take_screenshot(self, filename=None):
        """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"""
        if filename is None:
            filename = f"screenshot_{int(time.time())}.png"
        
        try:
            screenshot = pyautogui.screenshot()
            screenshot.save(filename)
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return filename
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None
    
    def click_image(self, image_path, confidence=0.8):
        """–ö–ª–∏–∫–∞–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        try:
            location = pyautogui.locateOnScreen(image_path, confidence=confidence)
            if location:
                center = pyautogui.center(location)
                pyautogui.click(center)
                print(f"üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {image_path}")
                return True
            else:
                print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return False
    
    def type_text(self, text):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
        try:
            pyautogui.typewrite(text, interval=0.05)
            print(f"‚å®Ô∏è –ù–∞–ø–µ—á–∞—Ç–∞–Ω —Ç–µ–∫—Å—Ç: {text[:50]}...")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
            return False
    
    def press_keys(self, keys):
        """–ù–∞–∂–∏–º–∞–µ—Ç –∫–ª–∞–≤–∏—à–∏ –∏–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à"""
        try:
            if isinstance(keys, str):
                pyautogui.press(keys)
            elif isinstance(keys, list):
                pyautogui.hotkey(*keys)
            print(f"‚å®Ô∏è –ù–∞–∂–∞—Ç—ã –∫–ª–∞–≤–∏—à–∏: {keys}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
computer = ComputerController()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Open Interpreter
def find_and_launch_music_app():
    """–ù–∞—Ö–æ–¥–∏—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    return computer.find_and_launch_music_app()

def control_media(action):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞"""
    return computer.control_media(action)

def find_application(app_name):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    return computer.find_application(app_name)

def search_files(pattern, directory=None):
    """–ò—â–µ—Ç —Ñ–∞–π–ª—ã"""
    return computer.search_files(pattern, directory)

def take_screenshot(filename=None):
    """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç"""
    return computer.take_screenshot(filename)

def click_image(image_path, confidence=0.8):
    """–ö–ª–∏–∫–∞–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    return computer.click_image(image_path, confidence)

def type_text(text):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
    return computer.type_text(text)

def press_keys(keys):
    """–ù–∞–∂–∏–º–∞–µ—Ç –∫–ª–∞–≤–∏—à–∏"""
    return computer.press_keys(keys)

# === –†–ê–°–®–ò–†–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ï–î–ò–ê ===

def smart_media_control(action="play"):
    """
    –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ - –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ª—é–±—ã–º –º–µ–¥–∏–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    Actions: play, pause, stop, next, previous, volume_up, volume_down
    """
    if not GUI_AVAILABLE:
        return "‚ùå GUI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    try:
        print(f"üéµ –í—ã–ø–æ–ª–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ —Å –º–µ–¥–∏–∞: {action}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ–¥–∏–∞ –∫–ª–∞–≤–∏—à–∏
        media_keys = {
            'play': 'playpause',
            'pause': 'playpause', 
            'stop': 'stop',
            'next': 'nexttrack',
            'previous': 'prevtrack',
            'volume_up': 'volumeup',
            'volume_down': 'volumedown'
        }
        
        if action in media_keys:
            print(f"üéπ –ù–∞–∂–∏–º–∞—é –º–µ–¥–∏–∞ –∫–ª–∞–≤–∏—à—É: {media_keys[action]}")
            pyautogui.press(media_keys[action])
            time.sleep(0.5)
            return f"‚úÖ –ú–µ–¥–∏–∞ –∫–æ–º–∞–Ω–¥–∞ '{action}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        
        return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞: {str(e)}"

def find_and_control_spotify():
    """–ù–∞—Ö–æ–¥–∏—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç Spotify"""
    if not GUI_AVAILABLE:
        return "‚ùå GUI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    try:
        # –ò—â–µ–º –æ–∫–Ω–æ Spotify
        spotify_found = False
        for proc in psutil.process_iter(['pid', 'name']):
            try:
                if 'spotify' in proc.info['name'].lower():
                    spotify_found = True
                    break
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        if not spotify_found:
            print("üéµ Spotify –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞—é—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å...")
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Spotify
            try:
                subprocess.Popen(['spotify'])
                time.sleep(3)
                return "‚úÖ Spotify –∑–∞–ø—É—â–µ–Ω"
            except:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Spotify"
        
        # Spotify –Ω–∞–π–¥–µ–Ω, —É–ø—Ä–∞–≤–ª—è–µ–º –∏–º
        print("üéµ Spotify –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
        pyautogui.press('playpause')
        return "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Spotify"
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Spotify: {str(e)}"

def launch_music_app():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    if not GUI_AVAILABLE:
        return "‚ùå GUI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    music_apps = [
        ("Spotify", ["spotify", "Spotify.exe"]),
        ("VLC", ["vlc", "vlc.exe"]),
        ("Windows Media Player", ["wmplayer", "wmplayer.exe"]),
        ("iTunes", ["iTunes", "iTunes.exe"]),
        ("AIMP", ["aimp", "AIMP.exe"]),
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            proc_name = proc.info['name'].lower()
            for app_name, commands in music_apps:
                if any(cmd.lower().replace('.exe', '') in proc_name for cmd in commands):
                    print(f"üéµ {app_name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                    return f"‚úÖ {app_name} –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å
    for app_name, commands in music_apps:
        for cmd in commands:
            try:
                print(f"üéµ –ü—ã—Ç–∞—é—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {app_name}...")
                subprocess.Popen([cmd], shell=True)
                time.sleep(2)
                return f"‚úÖ {app_name} –∑–∞–ø—É—â–µ–Ω"
            except Exception as e:
                continue
    
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"

def advanced_click_by_image(image_name, confidence=0.8, timeout=5):
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    """
    if not GUI_AVAILABLE:
        return "‚ùå GUI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        current_dir = Path(__file__).parent if __file__ else Path.cwd()
        images_dir = current_dir / "images"
        images_dir.mkdir(exist_ok=True)
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot = pyautogui.screenshot()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                location = pyautogui.locateOnScreen(image_name, confidence=confidence)
                if location:
                    center = pyautogui.center(location)
                    pyautogui.click(center)
                    return f"‚úÖ –ö–ª–∏–∫–Ω—É–ª –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é {image_name} –≤ –ø–æ–∑–∏—Ü–∏–∏ {center}"
            except pyautogui.ImageNotFoundException:
                pass
            time.sleep(0.5)
        
        return f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"

def smart_window_control(app_name, action="activate"):
    """
    –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    Actions: activate, minimize, maximize, close
    """
    if not GUI_AVAILABLE:
        return "‚ùå GUI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    try:
        import pygetwindow as gw
        
        # –ò—â–µ–º –æ–∫–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        windows = gw.getWindowsWithTitle(app_name)
        if not windows:
            # –ò—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            all_windows = gw.getAllWindows()
            windows = [w for w in all_windows if app_name.lower() in w.title.lower()]
        
        if not windows:
            return f"‚ùå –û–∫–Ω–æ —Å –∏–º–µ–Ω–µ–º '{app_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        window = windows[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
        
        if action == "activate":
            window.activate()
            return f"‚úÖ –û–∫–Ω–æ '{window.title}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
        elif action == "minimize":
            window.minimize()
            return f"‚úÖ –û–∫–Ω–æ '{window.title}' –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
        elif action == "maximize":
            window.maximize()
            return f"‚úÖ –û–∫–Ω–æ '{window.title}' –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
        elif action == "close":
            window.close()
            return f"‚úÖ –û–∫–Ω–æ '{window.title}' –∑–∞–∫—Ä—ã—Ç–æ"
        else:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º: {str(e)}"
