#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–µ—Å—Ç Enhanced Computer Vision –¥–ª—è Open Interpreter
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è
"""

import sys
import os
sys.path.append('tools')

def test_cv_system():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è"""
    
    print("üß™ –¢–ï–°–¢ ENHANCED COMPUTER VISION")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
        from enhanced_cv import EnhancedComputerVision, smart_click, analyze_screen
        from cv_skills import (
            open_program, click_text, click_button, navigate_to, 
            smart_screenshot, screen_analysis, play_music_smart
        )
        
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CV —Å–∏—Å—Ç–µ–º—ã
        cv = EnhancedComputerVision()
        print("‚úÖ Enhanced Computer Vision –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–∞
        print("\nüìä –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–∞")
        screen_result = screen_analysis()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {screen_result}")
        
        # –¢–µ—Å—Ç 2: –£–º–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        print("\nüì∏ –¢–µ—Å—Ç 2: –£–º–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
        screenshot_result = smart_screenshot("test_enhanced_cv.png")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {screenshot_result}")
        
        # –¢–µ—Å—Ç 3: –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ (–Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π)
        print("\nüñ•Ô∏è –¢–µ—Å—Ç 3: –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞")
        image = cv.capture.capture_screen()
        if image.size > 0:
            print(f"‚úÖ –ó–∞—Ö–≤–∞—Ç —É—Å–ø–µ—à–µ–Ω: {image.shape}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞")
        
        # –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("\nüîç –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        if image.size > 0:
            elements = cv.local_processor.find_ui_elements_basic(image)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(elements)} UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        else:
            print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –¢–µ—Å—Ç 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("\nüîß –¢–µ—Å—Ç 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π
        functions_to_test = [
            ("open_program", open_program),
            ("click_text", click_text), 
            ("click_button", click_button),
            ("navigate_to", navigate_to),
            ("play_music_smart", play_music_smart)
        ]
        
        for func_name, func in functions_to_test:
            try:
                # –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è)
                if func_name == "open_program":
                    result = "–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞"  # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ
                elif func_name in ["click_text", "click_button"]:
                    result = "–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞"  # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ
                elif func_name == "navigate_to":
                    result = "–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞"  # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ  
                elif func_name == "play_music_smart":
                    result = "–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞"  # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ
                
                print(f"‚úÖ {func_name}: {result}")
                
            except Exception as e:
                print(f"‚ùå {func_name}: –û—à–∏–±–∫–∞ - {e}")
        
        print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ opencv-python: pip install opencv-python")
        print("   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pyautogui: pip install pyautogui")
        print("   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ mss: pip install mss")
        return False
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    print("üì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 30)
    
    dependencies = [
        "numpy", "PIL", "cv2", "mss", "pyautogui"
    ]
    
    all_ok = True
    
    for dep in dependencies:
        try:
            if dep == "PIL":
                import PIL
                print(f"‚úÖ {dep}: {PIL.__version__}")
            elif dep == "cv2":
                import cv2
                print(f"‚úÖ {dep}: {cv2.__version__}")
            elif dep == "mss":
                import mss
                print(f"‚úÖ {dep}: –î–æ—Å—Ç—É–ø–µ–Ω")
            elif dep == "pyautogui":
                import pyautogui
                print(f"‚úÖ {dep}: –î–æ—Å—Ç—É–ø–µ–Ω")
            elif dep == "numpy":
                import numpy as np
                print(f"‚úÖ {dep}: {np.__version__}")
            else:
                exec(f"import {dep}")
                print(f"‚úÖ {dep}: –î–æ—Å—Ç—É–ø–µ–Ω")
                
        except ImportError:
            print(f"‚ùå {dep}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            all_ok = False
    
    return all_ok

def performance_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    print("\n‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 30)
    
    try:
        from enhanced_cv import EnhancedComputerVision
        import time
        
        cv = EnhancedComputerVision()
        
        # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞
        start_time = time.time()
        for i in range(5):
            image = cv.capture.capture_screen()
        capture_time = (time.time() - start_time) / 5
        
        print(f"üì∏ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞—Ö–≤–∞—Ç–∞: {capture_time*1000:.1f}ms")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
        if image.size > 0:
            start_time = time.time()
            elements = cv.local_processor.find_ui_elements_basic(image)
            analysis_time = time.time() - start_time
            
            print(f"üîç –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_time*1000:.1f}ms")
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(elements)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê ENHANCED COMPUTER VISION")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    deps_ok = test_dependencies()
    
    if not deps_ok:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–´")
        print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install opencv-python pyautogui mss pillow numpy")
        sys.exit(1)
    
    # 2. –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    main_test_ok = test_cv_system()
    
    # 3. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if main_test_ok:
        perf_ok = performance_test()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    if main_test_ok:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Enhanced Computer Vision –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("   - cv.analyze - –∞–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–∞")
        print("   - cv.screenshot - —É–º–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
        print("   - cv.open_program - –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
        print("   - cv.click_text - –∫–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É")
        print("   - cv.click_button - –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ")
        print("   - cv.play_music - —É–º–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏")
    else:
        print("‚ùå –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
